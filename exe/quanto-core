#!/bin/bash
#$ -S /bin/bash -l mem_req=4G,s_vmem=4G -pe def_slot 4
#
# usage:
#   quanto-core --accession-id <SRA Accession ID> --experiment-id <SRA Experiment ID> --read-layout <SINGLE or PAIRED> --fastqc-dir <FastQC result directory> --ftp-connection-pool <FTP connection management directory> --fastq-checksum-table <FastQ checksum table> --log-file <Job log file>
#
set -e

#
# Load external variables and functions
#

PROJECT_DIR="$HOME/repos/sra-quanto" # fix me
source "${PROJECT_DIR}/lib/quanto.sh"

#
# Parsing command line arguments
#

while [[ $# -gt 1 ]]; do
  key=${1}
  case ${key} in
    --accession-id)
    ACCESSION_ID="${2}"
    shift
    ;;
    --experiment-id)
    EXPERIMENT_ID="${2}"
    shift
    ;;
    --read-layout)
    READ_LAYOUT="${2}"
    shift
    ;;
    # Path to directory to save results
    --fastqc-dir)
    FASTQC_RESULT_DIR="${2}"
    shift
    ;;
    # path to log file
    --log-file)
    LOGFILE="${2}"
    shift
    ;;
    # Path to ftp connection log directory
    --ftp-connection-pool)
    FTP_CONNECTION_POOL="${2}"
    shift
    ;;
    # Path to md5 checksum table for fastq files
    --fastq-checksum)
    FASTQ_CHECKSUM="${2}"
    shift
    ;;
    --job-list)
    JOB_LIST="${2}"
    shift
    ;;
  esac
  shift
done

#
# Option: SGE array job
#

if [[ ! -z "${JOB_LIST}" ]] ; then
  job_number=${SGE_TASK_ID}
  args=`cat ${JOB_LIST} | sed "${job_number}q;d"`
  ACCESSION_ID=`echo ${args} | awk '{ print $1 }'`
  EXPERIMENT_ID=`echo ${args} | awk '{ print $2 }'`
  READ_LAYOUT=`echo ${args} | awk '{ print $3 }'`
  LOGFILE=`echo ${args} | awk '{ print $4 }'`
  echo "This is a part of array job, task id is ${job_number}" >> ${LOGFILE}
fi

#
# execute download/dump/fastqc
#

echo `date` "Quanto? ${EXPERIMENT_ID} on `hostname`" >> ${LOGFILE}

#
# Step 0. Get filapath and calculate file size
#

fileinfo=`get_fileinfo "${ACCESSION_ID}" "${EXPERIMENT_ID}" "${FTP_CONNECTION_POOL}"`
filepath=`echo "${fileinfo}" | awk '{ print $1 }'`
filesize=`echo "${fileinfo}" | awk '{ print $2 }'`

# exit when data not found
if [[ -z "${filepath}" ]] ; then
  echo "Error: no data on ftp server" >> ${LOGFILE}
  exit 1
fi

echo `date` "File path: ${filepath}" >> ${LOGFILE}
echo `date` "File size: ${filesize}" >> ${LOGFILE}

#
# Step 1. Set working directory
#

workdir=`set_working_directory "${filesize}" "${EXPERIMENT_ID}"`
echo `date` "Set working directory to: ${workdir}" >> ${LOGFILE}

#
# Step 2. Download data
#

download_data "${EXPERIMENT_ID}" "${filepath}" "${workdir}" "${FTP_CONNECTION_POOL}"
echo `date` "Data download completed." >> ${LOGFILE}
ls -l "${workdir}" >> ${LOGFILE}

#
# Step 3. Validate downloaded data
#

validate_downloaded_files "${workdir}" "${LOGFILE}" "${FASTQ_CHECKSUM}"
echo `date` "Validation completed." >> ${LOGFILE}

#
# Step 4. Execute Fastqdump/FastQC
#

result_path=`execute_qcalc "${workdir}" "${READ_LAYOUT}" "${LOGFILE}"`
echo `date` "FastQC completed. Result saved to ${result_path}" >> ${LOGFILE}

#
# Step 5. Cleaning working directory
#

flush_workdir ${workdir}
echo `date` "Finished FastQC for ${EXPERIMENT_ID}." >> ${LOGFILE}

## trap
trap "rm -fr ${workdir}" EXIT
